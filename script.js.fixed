document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM Content Loaded - Initializing space portfolio...');
    
    // Notification system (Define this first as it's used by other functions)
    function showNotification(message, type = 'info') {
        // Remove existing notifications
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notif => notif.remove());
        
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification fixed top-4 right-4 p-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full z-50 max-w-md`;
        
        // Style based on type
        if (type === 'success') {
            notification.classList.add('bg-green-600', 'text-white');
        } else if (type === 'error') {
            notification.classList.add('bg-red-600', 'text-white');
        } else {
            notification.classList.add('bg-blue-600', 'text-white');
        }
        
        notification.innerHTML = `
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <span class="mr-2">
                        ${type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : '‚ÑπÔ∏è'}
                    </span>
                    <span>${message}</span>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white hover:text-gray-200">
                    ‚úï
                </button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
            notification.classList.remove('translate-x-full');
        }, 100);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            notification.classList.add('translate-x-full');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 300);
        }, 5000);
    }
    
    // Mobile Menu Toggle
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuBtn && mobileMenu) {
        mobileMenuBtn.addEventListener('click', () => {
            mobileMenu.classList.toggle('hidden');
        });
    }
    
    // Smooth Scrolling for Navigation Links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
                
                // Close mobile menu if open
                if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
                    mobileMenu.classList.add('hidden');
                }
            }
        });
    });
    
    // Form validation before submission to FormSubmit service
    const contactForm = document.querySelector('#contact form');
    if (contactForm) {
        contactForm.addEventListener('submit', (e) => {
            // Get form elements
            const submitBtn = contactForm.querySelector('button[type="submit"]');
            const originalBtnText = submitBtn.textContent;
            
            // Get form data for validation
            const formData = new FormData(contactForm);
            const name = formData.get('name') || contactForm.querySelector('input[type="text"]').value;
            const email = formData.get('email') || contactForm.querySelector('input[type="email"]').value;
            const message = formData.get('message') || contactForm.querySelector('textarea').value;
            
            // Client-side validation
            let isValid = true;
            let errorMessage = '';
            
            if (!name || !email || !message) {
                errorMessage = 'Please fill in all fields.';
                isValid = false;
            } else if (name.length < 2 || name.length > 100) {
                errorMessage = 'Name must be between 2 and 100 characters.';
                isValid = false;
            } else if (message.length < 10 || message.length > 1000) {
                errorMessage = 'Message must be between 10 and 1000 characters.';
                isValid = false;
            } else {
                // Email validation
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                    errorMessage = 'Please enter a valid email address.';
                    isValid = false;
                }
            }
            
            if (!isValid) {
                e.preventDefault();
                showNotification(errorMessage, 'error');
                return false;
            }
            
            // Show loading state and let the form submit to FormSubmit service
            submitBtn.textContent = 'üöÄ Sending...';
            submitBtn.classList.add('opacity-75');
            
            // Don't prevent default - let FormSubmit handle it
            return true;
        });
    }
    
    // Add floating animation to hero buttons
    if (typeof gsap !== 'undefined') {
        gsap.to('#hero .btn-primary', {
            y: -10,
            duration: 2,
            ease: 'power2.inOut',
            yoyo: true,
            repeat: -1
        });
        
        gsap.to('#hero .btn-secondary', {
            y: -8,
            duration: 2.5,
            ease: 'power2.inOut',
            yoyo: true,
            repeat: -1,
            delay: 0.3
        });
    }
    
    // Rest of your existing code...
    
    // End of DOMContentLoaded event listener
});
